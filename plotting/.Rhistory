source('~/_uw18.19/2018.7/ANTH 215/illnessclause.R')
install.packages("ggplot2")
source('~/_uw18.19/2018.7/ANTH 215/illnessclause.R')
source('~/_uw18.19/2018.7/ANTH 215/illnessclause.R')
total
total
print.data.frame {total}
print.data.frame total
print(total)
mtcars
print(total[0,0,0])
total <- data.frame(year, political, illness)
total <- data.frame(
year = c(1999,2000)
political = c(2000,12000)
illness = c(200,1300)
)
total <- data.frame(
year = c(1999,2000),
political = c(2000,12000),
illness = c(200,1300)
)
print(total)
ggplot(print)
ggplot(total)
ggplot(data=total)
ggplot(data=total)
ggplot(histogram,data=total)
ggplot(data=total, aes(f0)) +
geom_histogram(data=year)
ggplot(data=total, aes(f0)) +
geom_histogram(data=year) +
geom_histogram(data=political)
ggplot(data=total, aes(f0)) + geom_histogram()
ggplot(data=total) + geom_histogram()
ggplot(data=total) + geom_histogram(binwidth=1)
ggplot(data=total, aes(x=weight)) + geom_histogram(binwidth=1)
ggplot(data=total, aes(x=year)) + geom_histogram(binwidth=1)
ggplot(data=total, aes(x=year, breaks=1)) + geom_histogram(binwidth=1)
ggplot(data=total) + geom_histogram(binwidth=1) +
scale_x_continuous("Year", breaks = seq(1999,2000,by = 1))
l, aes(x=year)
ggplot(data=total, aes(x=year)) + geom_histogram(binwidth=1) +
scale_x_continuous("Year", breaks = seq(1999,2000) ,by = 1))
ggplot(data=total, aes(x=year)) + geom_histogram(binwidth=1) +
scale_x_continuous("Year", breaks = seq(1999,2000), by = 1)
scale_x_continuous("Year", breaks = seq(1999,2000, by = 1)
ggplot(data=total, aes(x=year)) + geom_histogram(binwidth=1) +
scale_x_continuous("Year", breaks = seq(1999,2000, by = 1) )
ggplot(data=total, aes(x=year)) + geom_histogram(binwidth=2) +
scale_x_continuous("Year", breaks = seq(1999,2000, by = 1) )
install.packages("swirl")
swirl()
swirl
library("swirl")
ls()
gc()
ls()
rm()
ls()
rm(list=ls())
ls
install("cardata")
install.packages("cardata")
install.packages("carData")
library(carData)
carData("FLORIDA")
Florida
Florida(GORE)
Florida
Florida[GORE]
Florida['GORE']
Florida[GORE > BUSH]
Florida['GORE' > 'BUSH']
Florida[Florida['GORE'] > Florida['BUSH']]
Florida['GORE']
Florida['BUSH']
Florida['GORE']
Florida['GORE'] > Florida['BUSH']
Florida[Florida['GORE'] > Florida['BUSH'] == TRUE]
Florida[(Florida['GORE'] > Florida['BUSH']) == TRUE]
Florida[(Florida$GORE > Florida$BUSH)]
Florida[Florida$GORE > Florida$BUSH]
Florida$GORE > Florida$BUSH
Florida['GORE'] > Florida['BUSH']
install.packages(dplyr)
"dplyr"
install.packages("dplyr")
library("dplyr")
install.packages("dplyr")
nrow(Florida[,Florida$GORE > Florida$BUSH])
nrow(Florida[Florida$GORE > Florida$BUSH,])
nrow(Florida[GORE > BUSH])
(Florida[Florida$GORE > Florida$BUSH,])
(Florida[Florida$GORE > Florida$BUSH,])[
]
(Florida[Florida$GORE > Florida$BUSH,])[NADER]
(Florida[Florida$GORE > Florida$BUSH,])["NADER"]
sum(Florida[Florida$GORE > Florida$BUSH,]["NADER"])
rownames(Florida[Florida$Total == max(Florida$Total),])
rownames(Florida[Florida$Total == min(Florida$Total),])
rownames(Florida$Total[Florida$Total == max(Florida$Total),])
rownames(Florida[Florida$Total = max(Florida$Total),])
rownames(Florida[Florida$Total == min(Florida$Total),])
Florida[Florida$Total == min(Florida$Total),])
Florida[Florida$Total == min(Florida$Total),]
Florida[Florida$Total == max(Florida$Total),]
rownames(Florida[Florida$Total == min(Florida$Total),])
rownames(Florida[Florida$Total == max(Florida$Total),])
rownames(Florida[Florida$Total == max(Florida$Total),])
Florida[Florida$GORE > Florida$BUSH]
Florida[Florida$GORE > Florida$BUS,H]
Florida[Florida$GORE > Florida$BUSH,]
Florida[Florida$GORE > Florida$BUSH,]['NADER']
sum(Florida[Florida$GORE > Florida$BUSH,]['NADER'])
# Create a vector `students` holding 1,000 values representing students
# They should have the values "Student 1", "Student 2",..., "Student 1000"
students <- seq("Student" * 1000)
# Create a vector `students` holding 1,000 values representing students
# They should have the values "Student 1", "Student 2",..., "Student 1000"
students <- seq("Student" [1:1000])
print(students)
source('~/uw19.20/2019.9/info201/workspace/a3-michaelghuang19/assignment.r', echo=TRUE)
source('~/uw19.20/2019.9/info201/workspace/a3-michaelghuang19/assignment.r', echo=TRUE)
source('~/uw19.20/2019.9/info201/workspace/a3-michaelghuang19/assignment.r', echo=TRUE)
source('~/uw19.20/2019.9/info201/workspace/a3-michaelghuang19/assignment.r', echo=TRUE)
source('~/uw19.20/2019.9/info201/workspace/a3-michaelghuang19/assignment.r', echo=TRUE)
source('~/uw19.20/2019.9/info201/workspace/a3-michaelghuang19/assignment.r', echo=TRUE)
source('~/uw19.20/2019.9/info201/workspace/a3-michaelghuang19/assignment.r', echo=TRUE)
source('~/uw19.20/2019.9/info201/workspace/a3-michaelghuang19/assignment.r', echo=TRUE)
source('~/uw19.20/2019.9/info201/workspace/a3-michaelghuang19/assignment.r', echo=TRUE)
source('~/uw19.20/2019.9/info201/workspace/a3-michaelghuang19/assignment.r', echo=TRUE)
source('~/uw19.20/2019.9/info201/workspace/a3-michaelghuang19/assignment.r', echo=TRUE)
source('~/uw19.20/2019.9/info201/workspace/a3-michaelghuang19/assignment.r', echo=TRUE)
source('~/uw19.20/2019.9/info201/workspace/a3-michaelghuang19/assignment.r', echo=TRUE)
source('~/uw19.20/2019.9/info201/workspace/a3-michaelghuang19/assignment.r', echo=TRUE)
source('~/uw19.20/2019.9/info201/workspace/a3-michaelghuang19/assignment.r', echo=TRUE)
source('~/uw19.20/2019.9/info201/workspace/a3-michaelghuang19/assignment.r', echo=TRUE)
source('~/uw19.20/2019.9/info201/workspace/a3-michaelghuang19/assignment.r', echo=TRUE)
source('~/uw19.20/2019.9/info201/workspace/a3-michaelghuang19/assignment.r', echo=TRUE)
source('~/uw19.20/2019.9/info201/workspace/a3-michaelghuang19/assignment.r', echo=TRUE)
source('~/uw19.20/2019.9/info201/workspace/a3-michaelghuang19/assignment.r', echo=TRUE)
source('~/uw19.20/2019.9/info201/workspace/a3-michaelghuang19/assignment.r', echo=TRUE)
source('~/uw19.20/2019.9/info201/workspace/a3-michaelghuang19/assignment.r', echo=TRUE)
source('~/uw19.20/2019.9/info201/workspace/a3-michaelghuang19/assignment.r', echo=TRUE)
source('~/uw19.20/2019.9/info201/workspace/a3-michaelghuang19/assignment.r', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
install.packages("pscl")
source('~/.active-rstudio-document', echo=TRUE)
outcome <- presidentialElections %>%
select(-south) %>%
mutate(year = paste0("demVote_", year)) %>%
spread(key = year, value = demVote)
install.packages('dplyr')
intall.packages("tidyr")
install.packages("tidyr")
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
install.packages("nycflights13")
library("nycflights13")
colnames(flights)
View(flights)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/a.R', echo=TRUE)
source('~/a.R', echo=TRUE)
source('~/a.R', echo=TRUE)
source('~/a.R', echo=TRUE)
source('~/a.R', echo=TRUE)
source('~/a.R', echo=TRUE)
source('~/a.R', echo=TRUE)
source('~/a.R', echo=TRUE)
source('~/a.R', echo=TRUE)
source('~/a.R', echo=TRUE)
source('~/a.R', echo=TRUE)
source('~/a.R', echo=TRUE)
source('~/a.R', echo=TRUE)
source('~/a.R', echo=TRUE)
source('~/a.R', echo=TRUE)
source('~/a.R', echo=TRUE)
source('~/a.R', echo=TRUE)
source('~/a.R', echo=TRUE)
source('~/a.R', echo=TRUE)
?flights
source('~/a.R', echo=TRUE)
source('~/a.R', echo=TRUE)
source('~/a.R', echo=TRUE)
airlines {nycflights13::airlines}
airlines {nycflights11}
airlines$name
airlines$carrier
airlines
source('~/a.R', echo=TRUE)
airlines
source('~/a.R', echo=TRUE)
source('~/a.R', echo=TRUE)
source('~/a.R', echo=TRUE)
source('~/a.R', echo=TRUE)
source('~/a.R', echo=TRUE)
dest
?flights
airports
source('~/a.R', echo=TRUE)
source('~/a.R', echo=TRUE)
source('~/a.R', echo=TRUE)
airports$TVC
airports[TVC,]
airports[,TVC]
airports["TVC",]
airports[,"TVC"]
airports["TVC",]
airports
source('~/a.R', echo=TRUE)
airports
airports["04G",]
airports["04G",1]
airports[1,1]
airports[1,]
source('~/a.R', echo=TRUE)
install("ggmap")
install.packages("ggmap")
install.packages("ggplot2")
source('~/uw19.20/2019.9/info201/workspace/a.R', echo=TRUE)
ggplot(df) +
geom_col(mapping = aes(x = label, y = value, fill = blue))
source('~/uw19.20/2019.9/info201/workspace/a.R', echo=TRUE)
source('~/uw19.20/2019.9/info201/workspace/a.R', echo=TRUE)
source('~/uw19.20/2019.9/info201/workspace/a.R', echo=TRUE)
install.packages('rsconnect')
rsconnect::setAccountInfo(name='michaelghuang19',
token='7C69ADB169469A86013BC8F75EA6096F',
secret='<SECRET>')
rsconnect::setAccountInfo(name='michaelghuang19', token='7C69ADB169469A86013BC8F75EA6096F', secret='3H97/nVLiQzsS93UGk8Vwiups7C/0sDNxr2cFYLP')
library(rsconnect)
rsconnect::deployApp("app.R")
shiny::runApp('uw19.20/2019.9/info201/workspace/a7--michaelghuang19')
rsconnect::setAccountInfo(name='michaelghuang19', token='7C69ADB169469A86013BC8F75EA6096F', secret='3H97/nVLiQzsS93UGk8Vwiups7C/0sDNxr2cFYLP')
rsconnect::setAccountInfo(name='michaelghuang19', token='7C69ADB169469A86013BC8F75EA6096F', secret='3H97/nVLiQzsS93UGk8Vwiups7C/0sDNxr2cFYLP')
runApp('uw19.20/2019.9/info201/workspace/a7--michaelghuang19')
runApp('uw19.20/2019.9/info201/workspace/a7--michaelghuang19')
shiny::runApp('uw19.20/2019.9/info201/workspace/a7--michaelghuang19')
shiny::runApp('uw19.20/2019.9/info201/workspace/a7--michaelghuang19')
runApp('uw19.20/2019.9/info201/workspace/a7--michaelghuang19')
runApp('uw19.20/2019.9/info201/workspace/a7--michaelghuang19')
runApp('uw19.20/2019.9/info201/workspace/a7--michaelghuang19')
runApp('uw19.20/2019.9/info201/workspace/a7--michaelghuang19')
overview_p1 <- "<br> This is an example application practices skills in development and presentation--specifically by using dynamic API calls and the shiny web app architecture to present and relay information as specified by the user. We will be using the <B>ProPublica Congress API</B> to get various information about Congressional members. <br>"
runApp('uw19.20/2019.9/info201/workspace/a7--michaelghuang19')
runApp('uw19.20/2019.9/info201/workspace/a7--michaelghuang19')
runApp('uw19.20/2019.9/info201/workspace/a7--michaelghuang19')
runApp('uw19.20/2019.9/info201/workspace/a7--michaelghuang19')
runApp('uw19.20/2019.9/info201/workspace/a7--michaelghuang19')
runApp('uw19.20/2019.9/info201/workspace/a7--michaelghuang19')
runApp('uw19.20/2019.9/info201/workspace/a7--michaelghuang19')
runApp('uw19.20/2019.9/info201/workspace/a7--michaelghuang19')
runApp('uw19.20/2019.9/info201/workspace/a7--michaelghuang19')
runApp('uw19.20/2019.9/info201/workspace/a7--michaelghuang19')
runApp('uw19.20/2019.9/info201/workspace/a7--michaelghuang19')
# Define UI for application that draws a histogram
ui <- fluidPage(
# Application title
titlePanel("Using the Congressional Member Information API"),
# Sidebar with a slider input for number of bins
sidebarLayout(
sidebarPanel(
sliderInput("bins",
"Number of bins:",
min = 1,
max = 50,
value = 30)
),
# Show a plot of the generated distribution
mainPanel(
# plotOutput("distPlot"),
# Output: Tabset w/ plot, summary, and table ----
tabsetPanel(type = "tabs",
tabPanel("About",
htmlOutput("aboutText"),
tags$a(href="https://projects.propublica.org/api-docs/congress-api/",
"Link to ProPublica Congress API"),
htmlOutput("affilText"),
htmlOutput("reflectionText")
),
tabPanel("State Rep. Info"),
tabPanel("Summary", plotOutput("distPlot"))
)
)
)
)
runApp('uw19.20/2019.9/info201/workspace/a7--michaelghuang19')
knitr::opts_chunk$set(echo = TRUE)
options(warn = -1)
library(ggplot2)
library(knitr)
library(plotly)
source("analysis.R")
by_year
by_year_us
by_gen
by_gen_us
by_age_us
by_sex_us
library(dplyr)
by_sex_us <- df %>%
filter(country == "United States") %>%
group_by(sex) %>%
summarise(Avg_Suicides_Per_100k = mean(suicides.100k.pop)) %>%
ggplot(aes(x = sex, y = Avg_Suicides_Per_100k)) +
geom_bar(stat = "identity")
library(ggplot)
install.packages(ggplot)
install.packages('ggplot')
install.packages("ggplot2")
install.packages("ggplot2")
install.packages("ggplot2")
install.packages("ggplot2")
devtools::install_github('xzhoulab/SPARK')
devtools::install_github('xzhoulab/SPARK')
library(rlang)
# rm(list = ls())
library(ggplot2)
library(stringr)
setwd("~/_workspace/_wangspring2020project/GSE111672/ST/pancreatic-scripts/plotting")
files = c('GSM3405534_PDAC-B-ST1.tsv')
for (file in files) {
print(file)
data <- read.table(file = str_c('data/', file),
sep = '\t',
header = TRUE,
check.names = FALSE)
# 1st datasets both have flipped axes, for some reason
if (file == 'GSM3036911_PDAC-A-ST1.tsv') {
coords <- data[1]
coords <- unlist(coords, use.names = FALSE)
} else {
coords <- colnames(data)
coords <- coords[2:length(coords)]
}
xlist <- vector()
ylist <- vector()
for (coord in coords) {
splitlist <- strsplit(coord, "x")
xcoord <- splitlist[[1]][1]
ycoord <- splitlist[[1]][2]
xlist <- c(xlist, xcoord)
ylist <- c(ylist, ycoord)
}
plotdata <- data.frame(xlist, ylist)
plotdata$xlist = as.numeric(plotdata$xlist)
plotdata$ylist = as.numeric(plotdata$ylist)
# print(plotdata)
print(ggplot(plotdata, aes(x = xlist, y = ylist)) +
# xlim(0, 50) +
# ylim(0, 50) +
geom_point(shape=15) +
scale_x_continuous(breaks = round(seq(min(plotdata$x), max(plotdata$x), by = 1),1)) +
scale_y_continuous(breaks = round(seq(min(plotdata$y), max(plotdata$y), by = 1),1)) +
theme( axis.title.x=element_blank(),
axis.title.y=element_blank())
# + coord_fixed()
)
ggsave(paste("figures/",
str_replace(file, "tsv", "pdf")),
plot = last_plot())
}
data
length(data$GGenes)
length(data$Genes)
data$Genes
length(coords)
files = c('GSM3036911_PDAC-A-ST1.tsv')
for (file in files) {
print(file)
data <- read.table(file = str_c('data/', file),
sep = '\t',
header = TRUE,
check.names = FALSE)
# 1st datasets both have flipped axes, for some reason
if (file == 'GSM3036911_PDAC-A-ST1.tsv') {
coords <- data[1]
coords <- unlist(coords, use.names = FALSE)
} else {
coords <- colnames(data)
coords <- coords[2:length(coords)]
}
xlist <- vector()
ylist <- vector()
for (coord in coords) {
splitlist <- strsplit(coord, "x")
xcoord <- splitlist[[1]][1]
ycoord <- splitlist[[1]][2]
xlist <- c(xlist, xcoord)
ylist <- c(ylist, ycoord)
}
plotdata <- data.frame(xlist, ylist)
plotdata$xlist = as.numeric(plotdata$xlist)
plotdata$ylist = as.numeric(plotdata$ylist)
# print(plotdata)
print(ggplot(plotdata, aes(x = xlist, y = ylist)) +
# xlim(0, 50) +
# ylim(0, 50) +
geom_point(shape=15) +
scale_x_continuous(breaks = round(seq(min(plotdata$x), max(plotdata$x), by = 1),1)) +
scale_y_continuous(breaks = round(seq(min(plotdata$y), max(plotdata$y), by = 1),1)) +
theme( axis.title.x=element_blank(),
axis.title.y=element_blank())
# + coord_fixed()
)
ggsave(paste("figures/",
str_replace(file, "tsv", "pdf")),
plot = last_plot())
}
length(coords)
